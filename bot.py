from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import sqlite3
import asyncio
from datetime import datetime, timedelta
import calendar
import os
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –í–ê–ñ–õ–ò–í–û: –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–æ–∫–µ–Ω!
API_TOKEN = "–í–ê–®_–°–ü–†–ê–í–ñ–ù–Ü–ô_–¢–û–ö–ï–ù_–¢–£–¢–£–¢"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()

# --- –°—Ç–∞–Ω–∏ –¥–ª—è FSM ---
class ReminderStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_time = State()
    waiting_for_days = State()
    editing_reminder = State()
    editing_text = State()
    editing_time = State()
    editing_days = State()

# --- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö ---
def init_db():
    try:
        conn = sqlite3.connect("reminders.db")
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            text TEXT,
            hour INTEGER,
            minute INTEGER,
            days TEXT,
            one_time INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active INTEGER DEFAULT 1
        )
        """)
        
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS schedule_photos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            photo_file_id TEXT,
            schedule_type TEXT,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
def get_db_connection():
    return sqlite3.connect("reminders.db")

def schedule_reminder(reminder):
    try:
        reminder_id, chat_id, text, hour, minute, days, one_time = reminder[:7]
        
        if one_time == 1:
            # –î–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
            run_date = datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0)
            if run_date <= datetime.now():
                run_date += timedelta(days=1)
            
            scheduler.add_job(
                send_reminder,
                trigger='date',
                run_date=run_date,
                args=[chat_id, text, reminder_id],
                id=f"reminder_{reminder_id}",
                replace_existing=True
            )
        else:
            # –î–ª—è –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
            trigger = CronTrigger(hour=hour, minute=minute, day_of_week=days)
            scheduler.add_job(
                send_reminder,
                trigger=trigger,
                args=[chat_id, text, reminder_id],
                id=f"reminder_{reminder_id}",
                replace_existing=True
            )
        print(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {reminder_id} –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {reminder_id}: {e}")

async def send_reminder(chat_id, text, reminder_id):
    try:
        await bot.send_message(chat_id, f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n{text}")
        
        # –Ø–∫—â–æ —Ü–µ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –∑ –ë–î
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT one_time FROM reminders WHERE id=?", (reminder_id,))
        result = cursor.fetchone()
        
        if result and result[0] == 1:
            cursor.execute("DELETE FROM reminders WHERE id=?", (reminder_id,))
            conn.commit()
        conn.close()
        print(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {reminder_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

def load_all_reminders():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM reminders WHERE is_active=1")
        reminders = cursor.fetchall()
        conn.close()
        
        for rem in reminders:
            schedule_reminder(rem)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(reminders)} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {e}")

def get_days_emoji(days_str):
    days_map = {
        'mon': 'üü¢', 'tue': 'üü°', 'wed': 'üîµ', 'thu': 'üü†', 
        'fri': 'üî¥', 'sat': 'üü£', 'sun': '‚ö™'
    }
    if not days_str:
        return ""
    
    days_list = [d.strip().lower() for d in days_str.split(',')]
    return ' '.join([days_map.get(day, '‚ö´') for day in days_list])

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏"), KeyboardButton("üìù –ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"))
    keyboard.add(KeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥"), KeyboardButton("üì∏ –§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É"))
    keyboard.add(KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return keyboard

def get_schedule_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="schedule_today"),
        InlineKeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow")
    )
    keyboard.add(
        InlineKeyboardButton("üóìÔ∏è –¶–µ–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="schedule_week"),
        InlineKeyboardButton("üìä –¶–µ–π –º—ñ—Å—è—Ü—å", callback_data="schedule_month")
    )
    return keyboard

def get_days_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–ë—É–¥–Ω—ñ", callback_data="days_weekdays"),
        InlineKeyboardButton("–í–∏—Ö—ñ–¥–Ω—ñ", callback_data="days_weekend")
    )
    keyboard.add(
        InlineKeyboardButton("–©–æ–¥–Ω—è", callback_data="days_daily"),
        InlineKeyboardButton("–í–∏–±—Ä–∞—Ç–∏ –¥–Ω—ñ", callback_data="days_custom")
    )
    return keyboard

def get_photo_type_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data="photo_day"),
        InlineKeyboardButton("üóìÔ∏è –¢–∏–∂–¥–µ–Ω—å", callback_data="photo_week")
    )
    keyboard.add(
        InlineKeyboardButton("üìä –ú—ñ—Å—è—Ü—å", callback_data="photo_month"),
        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")
    )
    return keyboard

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply(
        "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç-–Ω–∞–≥–∞–¥—É–≤–∞—á!\n\n"
        "–Ø –º–æ–∂—É:\n"
        "‚ûï –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ó—Ö\n"
        "üìÖ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥\n"
        "üì∏ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:",
        reply_markup=get_main_keyboard()
    )

@dp.message_handler(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:**

**–û—Å–Ω–æ–≤–Ω—ñ:**
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É

**–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:**
/add - –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
/list - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
/edit - –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
/delete - –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è

**–†–æ–∑–∫–ª–∞–¥:**
/schedule - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥
/today - –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
/week - –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å

**–§–æ—Ç–æ:**
/photos - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ñ–æ—Ç–æ
/add_photo - –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É

**–§–æ—Ä–º–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:**
–ù–∞—Ç–∏—Å–Ω–∏ "‚ûï –î–æ–¥–∞—Ç–∏" —ñ —Å–ª—ñ–¥—É–π —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º, –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π:
`/add 14:30 –ó—Ä–æ–±–∏—Ç–∏ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –ë—É–¥–Ω—ñ`
    """
    await message.reply(help_text, parse_mode='Markdown')

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ---
@dp.message_handler(text="‚ûï –î–æ–¥–∞—Ç–∏")
@dp.message_handler(commands=['add'])
async def add_reminder_start(message: types.Message, state: FSMContext):
    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ get_args()
    if message.text.startswith('/add ') and len(message.text.split()) > 1:
        await add_reminder_quick(message)
        return
    
    await message.reply("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:")
    await ReminderStates.waiting_for_text.set()

async def add_reminder_quick(message: types.Message):
    """–®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
    try:
        parts = message.text.split(maxsplit=3)
        if len(parts) < 4:
            await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n/add 14:30 –¢–µ–∫—Å—Ç_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ë—É–¥–Ω—ñ")
            return
        
        _, time_str, text, days_text = parts
        hour, minute = map(int, time_str.split(":"))
        
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —á–∞—Å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì:–•–•")
            return
        
        days_map = {
            "–ë—É–¥–Ω—ñ": "mon,tue,wed,thu,fri",
            "–í–∏—Ö—ñ–¥–Ω—ñ": "sat,sun",
            "–©–æ–¥–Ω—è": "mon,tue,wed,thu,fri,sat,sun"
        }
        days = days_map.get(days_text, days_text.lower())
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO reminders (chat_id,text,hour,minute,days,one_time) VALUES (?,?,?,?,?,?)",
            (message.chat.id, text, hour, minute, days, 0)
        )
        conn.commit()
        reminder_id = cursor.lastrowid
        conn.close()
        
        schedule_reminder((reminder_id, message.chat.id, text, hour, minute, days, 0))
        
        await message.reply(
            f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ!\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {text}\n"
            f"‚è∞ –ß–∞—Å: {hour:02d}:{minute:02d}\n"
            f"üìÖ –î–Ω—ñ: {days_text} {get_days_emoji(days)}"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: {str(e)}")

@dp.message_handler(state=ReminderStates.waiting_for_text)
async def process_reminder_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.reply("‚è∞ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 14:30):")
    await ReminderStates.waiting_for_time.set()

@dp.message_handler(state=ReminderStates.waiting_for_time)
async def process_reminder_time(message: types.Message, state: FSMContext):
    try:
        hour, minute = map(int, message.text.split(":"))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
        
        await state.update_data(hour=hour, minute=minute)
        await message.reply("üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–Ω—ñ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", reply_markup=get_days_keyboard())
        await ReminderStates.waiting_for_days.set()
    except:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•:")

@dp.callback_query_handler(lambda c: c.data.startswith('days_'), state=ReminderStates.waiting_for_days)
async def process_reminder_days(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    days_map = {
        'days_weekdays': ('mon,tue,wed,thu,fri', '–ë—É–¥–Ω—ñ'),
        'days_weekend': ('sat,sun', '–í–∏—Ö—ñ–¥–Ω—ñ'),
        'days_daily': ('mon,tue,wed,thu,fri,sat,sun', '–©–æ–¥–Ω—è')
    }
    
    if callback_query.data in days_map:
        days, days_text = days_map[callback_query.data]
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO reminders (chat_id,text,hour,minute,days,one_time) VALUES (?,?,?,?,?,?)",
            (callback_query.from_user.id, data['text'], data['hour'], data['minute'], days, 0)
        )
        conn.commit()
        reminder_id = cursor.lastrowid
        conn.close()
        
        schedule_reminder((reminder_id, callback_query.from_user.id, data['text'], data['hour'], data['minute'], days, 0))
        
        await callback_query.message.edit_text(
            f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {data['text']}\n"
            f"‚è∞ –ß–∞—Å: {data['hour']:02d}:{data['minute']:02d}\n"
            f"üìÖ –î–Ω—ñ: {days_text} {get_days_emoji(days)}"
        )
        
        await state.finish()
    
    await callback_query.answer()

# --- –ü–µ—Ä–µ–≥–ª—è–¥ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ---
@dp.message_handler(text="üìù –ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
@dp.message_handler(commands=['list'])
async def list_reminders(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM reminders WHERE chat_id=? AND is_active=1 ORDER BY hour, minute", (message.chat.id,))
    reminders = cursor.fetchall()
    conn.close()
    
    if not reminders:
        await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.")
        return
    
    text = "üìù **–í–∞—à—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:**\n\n"
    for r in reminders:
        days_emoji = get_days_emoji(r[5])
        text += f"üîπ **ID {r[0]}:** {r[2]}\n"
        text += f"‚è∞ {r[3]:02d}:{r[4]:02d} {days_emoji}\n"
        text += f"üìÖ {r[5]}\n\n"
    
    text += "–î–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: /edit [ID]\n–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: /delete [ID]"
    
    await message.reply(text, parse_mode='Markdown')

# --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ---
@dp.message_handler(commands=['edit'])
async def edit_reminder_start(message: types.Message):
    try:
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
        args_text = message.text.replace('/edit', '').strip()
        if not args_text:
            await message.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: /edit 123")
            return
        
        reminder_id = args_text
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM reminders WHERE id=? AND chat_id=? AND is_active=1", 
                      (reminder_id, message.chat.id))
        reminder = cursor.fetchone()
        conn.close()
        
        if not reminder:
            await message.reply("‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data=f"edit_text_{reminder_id}"))
        keyboard.add(InlineKeyboardButton("‚è∞ –ß–∞—Å", callback_data=f"edit_time_{reminder_id}"))
        keyboard.add(InlineKeyboardButton("üìÖ –î–Ω—ñ", callback_data=f"edit_days_{reminder_id}"))
        keyboard.add(InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel"))
        
        text = f"‚úèÔ∏è **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ID {reminder_id}:**\n\n"
        text += f"üìù –¢–µ–∫—Å—Ç: {reminder[2]}\n"
        text += f"‚è∞ –ß–∞—Å: {reminder[3]:02d}:{reminder[4]:02d}\n"
        text += f"üìÖ –î–Ω—ñ: {reminder[5]} {get_days_emoji(reminder[5])}\n\n"
        text += "–©–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?"
        
        await message.reply(text, parse_mode='Markdown', reply_markup=keyboard)
        
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# --- –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ---
@dp.message_handler(commands=['delete'])
async def delete_reminder(message: types.Message):
    try:
        args_text = message.text.replace('/delete', '').strip()
        if not args_text:
            await message.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: /delete 123")
            return
        
        reminder_id = args_text
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM reminders WHERE id=? AND chat_id=?", 
                      (reminder_id, message.chat.id))
        deleted_count = cursor.rowcount
        conn.commit()
        conn.close()
        
        if deleted_count > 0:
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            try:
                scheduler.remove_job(f"reminder_{reminder_id}")
            except:
                pass
            
            await message.reply(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {reminder_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.reply("‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {str(e)}")

# --- –†–æ–∑–∫–ª–∞–¥ ---
@dp.message_handler(text="üìÖ –†–æ–∑–∫–ª–∞–¥")
@dp.message_handler(commands=['schedule'])
async def show_schedule_menu(message: types.Message):
    await message.reply("üìÖ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–æ–∑–∫–ª–∞–¥—É:", 
                       reply_markup=get_schedule_keyboard())

@dp.callback_query_handler(lambda c: c.data.startswith('schedule_'))
async def process_schedule_request(callback_query: types.CallbackQuery):
    period = callback_query.data.split('_')[1]
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    now = datetime.now()
    
    if period == 'today':
        day_name = calendar.day_name[now.weekday()].lower()[:3]
        cursor.execute("""
            SELECT * FROM reminders 
            WHERE chat_id=? AND is_active=1 AND (days LIKE ? OR days LIKE ?)
            ORDER BY hour, minute
        """, (callback_query.from_user.id, f'%{day_name}%', '%mon,tue,wed,thu,fri,sat,sun%'))
        title = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({now.strftime('%d.%m.%Y')})"
        
    elif period == 'tomorrow':
        tomorrow = now + timedelta(days=1)
        day_name = calendar.day_name[tomorrow.weekday()].lower()[:3]
        cursor.execute("""
            SELECT * FROM reminders 
            WHERE chat_id=? AND is_active=1 AND (days LIKE ? OR days LIKE ?)
            ORDER BY hour, minute
        """, (callback_query.from_user.id, f'%{day_name}%', '%mon,tue,wed,thu,fri,sat,sun%'))
        title = f"üìÜ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')})"
        
    elif period == 'week':
        cursor.execute("""
            SELECT * FROM reminders 
            WHERE chat_id=? AND is_active=1
            ORDER BY hour, minute
        """, (callback_query.from_user.id,))
        title = "üóìÔ∏è –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å"
        
    elif period == 'month':
        cursor.execute("""
            SELECT * FROM reminders 
            WHERE chat_id=? AND is_active=1
            ORDER BY hour, minute
        """, (callback_query.from_user.id,))
        title = "üìä –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –º—ñ—Å—è—Ü—å"
    
    reminders = cursor.fetchall()
    conn.close()
    
    if not reminders:
        await callback_query.message.edit_text(f"{title}\n\nüì≠ –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.")
        await callback_query.answer()
        return
    
    text = f"{title}\n\n"
    for r in reminders:
        days_emoji = get_days_emoji(r[5])
        text += f"‚è∞ {r[3]:02d}:{r[4]:02d} - {r[2]}\n"
        text += f"üìÖ {r[5]} {days_emoji}\n\n"
    
    await callback_query.message.edit_text(text)
    await callback_query.answer()

# --- –§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É ---
@dp.message_handler(text="üì∏ –§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É")
@dp.message_handler(commands=['add_photo'])
async def add_photo_start(message: types.Message):
    await message.reply("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É:", reply_markup=get_photo_type_keyboard())

@dp.message_handler(content_types=['photo'])
async def process_photo(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data=f"save_photo_day_{photo.file_id}"),
        InlineKeyboardButton("üóìÔ∏è –¢–∏–∂–¥–µ–Ω—å", callback_data=f"save_photo_week_{photo.file_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üìä –ú—ñ—Å—è—Ü—å", callback_data=f"save_photo_month_{photo.file_id}"),
        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")
    )
    
    await message.reply("üì∏ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ! –î–ª—è —è–∫–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —Ü–µ —Ä–æ–∑–∫–ª–∞–¥?", 
                       reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('save_photo_'))
async def save_photo(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    schedule_type = parts[2]
    file_id = '_'.join(parts[3:])  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è file_id –∑ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è–º–∏
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO schedule_photos (chat_id, photo_file_id, schedule_type, description)
        VALUES (?, ?, ?, ?)
    """, (callback_query.from_user.id, file_id, schedule_type, f"–†–æ–∑–∫–ª–∞–¥ ({schedule_type})"))
    conn.commit()
    conn.close()
    
    type_names = {'day': '–¥–µ–Ω—å', 'week': '—Ç–∏–∂–¥–µ–Ω—å', 'month': '–º—ñ—Å—è—Ü—å'}
    
    await callback_query.message.edit_text(
        f"‚úÖ –§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ {type_names[schedule_type]} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
        f"–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏: /photos"
    )
    await callback_query.answer()

@dp.message_handler(commands=['photos'])
async def show_photos(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT * FROM schedule_photos 
        WHERE chat_id=? 
        ORDER BY created_at DESC 
        LIMIT 10
    """, (message.chat.id,))
    photos = cursor.fetchall()
    conn.close()
    
    if not photos:
        await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É.")
        return
    
    await message.reply(f"üì∏ –í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É ({len(photos)}):")
    
    for photo in photos:
        caption = f"üìÖ {photo[4]} (ID: {photo[0]})\nüìÜ {photo[6]}"
        try:
            await bot.send_photo(message.chat.id, photo[2], caption=caption)
        except Exception as e:
            await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ ID {photo[0]}: {str(e)}")

# --- –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π ---
@dp.callback_query_handler(lambda c: c.data == 'cancel', state='*')
async def cancel_operation(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback_query.answer()

# –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message_handler(state='*')
async def unknown_message(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.reply(
            "ü§î –Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–±–æ /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.",
            reply_markup=get_main_keyboard()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        init_db()
        scheduler.start()
        load_all_reminders()
        print("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")

async def on_shutdown(dp):
    print("üîÑ –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    scheduler.shutdown()
    print("‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == "__main__":
    try:
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
